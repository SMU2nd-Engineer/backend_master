<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="myPageMapper">

<!--    유저 id를 이용하여 패스워드 가져오기    -->
    <select id="findPasswordByTokenId" parameterType="String" resultType="com.culturemoa.cultureMoaProject.user.dto.MyPagePasswordCheckDTO">
        select PASSWORD from USER_TBL where ID = #{id} and EDATE is null
    </select>


<!--    유저 id를 이용하여 소셜 정보 가져옴    -->
    <select id="findSocialLoginByTokenId" parameterType="String" resultType="com.culturemoa.cultureMoaProject.user.dto.MyPageCheckSocialDTO" >
    <!--   별칭 지정으로 dto와 맞춤     -->
        select SOCIAL_LOGIN as socialLogin from USER_TBL where ID=#{tokenUserId} and EDATE is null
    </select>

    <!--  유저 id를 이용하여 사용자 정보를 가져옴  -->
    <select id="findUserInfoByTokenId" parameterType="String" resultType="com.culturemoa.cultureMoaProject.user.dto.MyPageGetUserInfoDTO" >
        select NAME, NICKNAME, ADDRESS, EMAIL from USER_TBL where ID=#{tokenUserId} and EDATE is null
    </select>


<!--  유저 아이디를 통해서 마이페이지 갱신된 정보를 업데이트  -->
    <update id="updateUserInfo" parameterType="com.culturemoa.cultureMoaProject.user.dto.MyPageUpdateUserInfoDTO">
        update USER_TBL
        <set>
            NAME=#{name}, NICKNAME=#{nickName}, EMAIL=#{email}, ADDRESS=#{address}, CDATE =#{cDate}
            <if test="password !='' and password != null">
                , PASSWORD=#{password}
            </if>
        </set>
        where ID = #{id} and EDATE is null
    </update>


<!--  마이페이지 메인에서 사용할 찜 목록 최신 2개만 가져오기  -->
    <select id="getMainPeakListInfo" parameterType="String" resultType="com.culturemoa.cultureMoaProject.user.dto.MyPagePickProductListDTO">
        select P.IDX, P.TITLE, P.PRICE, P.FLAG, P.CONTENT, PI.IMAGE_URL as imageUrl ,
        P.CATEGORY_IDX AS categoryIdx, P.CATEGORYGENRE_IDX AS categoryGenreIdx
        from USER_PICK_TBL as UP
        join USER_TBL as U on U.IDX = UP.USER_IDX
        join PRODUCT_TBL as P on P.IDX = UP.PRODUCT_IDX
        join PRODUCT_IMAGE_TBL AS PI on PI.PRODUCT_IDX = P.IDX
        where U.ID = #{userId} AND U.EDATE IS NULL AND UP.EDATE IS NULL
        order by UP.SDATE DESC
        limit 2;
    </select>


<!--  마이페이지 메인에서 사용할 판매 내역 최신 4개만 가져오기  -->
    <select id="getMainSellListInfo" parameterType="String" resultType="com.culturemoa.cultureMoaProject.user.dto.MyPageSellListDTO" >
        SELECT
        P.IDX, P.TITLE, P.PRICE, P.FLAG, P.CONTENT, PI.IMAGE_URL AS imageUrl,
        P.CATEGORY_IDX AS categoryIdx, P.CATEGORYGENRE_IDX AS categoryGenreIdx, P.SDATE, P.EDATE
        FROM PRODUCT_TBL AS P
        JOIN PRODUCT_IMAGE_TBL AS PI ON PI.PRODUCT_IDX = P.IDX
        JOIN USER_TBL as U on U.IDX = P.USER_IDX
        WHERE U.ID = #{userId} AND U.EDATE IS NULL
        ORDER BY P.SDATE DESC
        limit 4;
    </select>


<!--  마이페이지 메인에서 사용할 리뷰 내역 5개 가져오기   -->
    <select id="getMainReviewListInfo" parameterType="String" resultType="com.culturemoa.cultureMoaProject.user.dto.ReviewListDTO" >
        select UR.REVIEW, UR.IDX, UR.SDATE
        from USER_REVIEW_TBL as UR
        join USER_TBL as U on U.IDX = UR.RECEIVER_USER_IDX
        where U.ID = #{userId} AND U.EDATE IS NULL
        order by UR.SDATE DESC
        limit 5;
    </select>


<!--  마이페이지 찜 목록 정보 가져오기  -->
    <select id="getWishListInfo" parameterType="String" resultType="com.culturemoa.cultureMoaProject.user.dto.MyPagePickProductListDTO">
        select P.IDX, P.TITLE, P.PRICE, P.FLAG, P.CONTENT, PI.IMAGE_URL as imageUrl, P.EDATE ,
        P.CATEGORY_IDX AS categoryIdx, P.CATEGORYGENRE_IDX AS categoryGenreIdx
        from USER_PICK_TBL as UP
        join USER_TBL as U on U.IDX = UP.USER_IDX
        join PRODUCT_TBL as P on P.IDX = UP.PRODUCT_IDX
        join PRODUCT_IMAGE_TBL AS PI on PI.PRODUCT_IDX = P.IDX
        where U.ID = #{userId} and UP.EDATE IS NULL AND U.EDATE IS NULL
        order by UP.SDATE DESC;
    </select>


<!--  마이페이지 찜 목록 정보 삭제하기(EDATE 업데이트 하기)  -->
    <update id="updateMyPick" parameterType="com.culturemoa.cultureMoaProject.user.dto.MyPickUpdateDTO" >
        update USER_PICK_TBL
        <set>
            EDATE = #{eDate}
        </set>
        where PRODUCT_IDX = #{productIdx}
    </update>


<!--  마이페이지에 사용자 기준 판매 목록을 가져오기  -->
    <select id="getMySellByListInfo" parameterType="String" resultType="com.culturemoa.cultureMoaProject.user.dto.MyPageSellListDTO" >
        SELECT
        P.IDX, P.TITLE, P.PRICE, P.FLAG, P.CONTENT, PI.IMAGE_URL AS imageUrl,
        P.CATEGORY_IDX AS categoryIdx, P.CATEGORYGENRE_IDX AS categoryGenreIdx, P.SDATE, P.EDATE
        FROM PRODUCT_TBL AS P
        JOIN PRODUCT_IMAGE_TBL AS PI ON PI.PRODUCT_IDX = P.IDX
        JOIN USER_TBL as U on U.IDX = P.USER_IDX
        WHERE U.ID = #{userId} AND U.EDATE IS NULL
        ORDER BY P.SDATE DESC;
    </select>


<!--  마이페이지에 사용자 기준 구매 목록 가져오기  -->
    <select id="getMyBuyListInfo" parameterType="String" resultType="com.culturemoa.cultureMoaProject.user.dto.MyPageBuyListDTO" >
        SELECT
        P.IDX, P.TITLE, P.PRICE, P.FLAG, P.CONTENT, PI.IMAGE_URL AS imageUrl,
        P.CATEGORY_IDX AS categoryIdx, P.CATEGORYGENRE_IDX AS categoryGenreIdx, P.EDATE, UT.SDATE AS purchaseDate
        FROM USER_TRANSACTION_TBL AS UT
        JOIN PRODUCT_TBL AS P ON P.IDX = UT.PRODUCT_IDX
        JOIN PRODUCT_IMAGE_TBL AS PI ON PI.PRODUCT_IDX = P.IDX
        JOIN USER_TBL as U on U.IDX = P.USER_IDX
        WHERE U.ID = #{userId} AND U.EDATE IS NULL
        ORDER BY UT.SDATE DESC;
    </select>


<!--  마이페이지 게시판 탭에서 사용자 작성 게시판 정보 가져오기  -->
    <select id="getMyBoardListInfo" parameterType="String" resultType="com.culturemoa.cultureMoaProject.user.dto.MyPageBoardDTO" >
        select C.IDX, C.TITLE, C.CATEGORY_IDX as categoryIdx
        from CONTENTS_TBL as C
        join USER_TBL as U on U.IDX = C.USER_IDX
        where U.ID = #{userId} AND U.EDATE IS NULL
        order by C.SDATE DESC;
    </select>


<!--  마이페이지 게시판 탭에서 사용자 작성 댓글 정보 가져오기  -->
    <select id="getMyCommentListInfo" parameterType="String" resultType="com.culturemoa.cultureMoaProject.user.dto.MyPageCommentDTO" >
        select CC.TEXT, CC.IDX, CC.SDATE
        from CONTENTS_COMMENT_TBL as CC
        join USER_TBL as U on U.IDX = CC.USER_IDX
        where U.ID = #{userId} AND U.EDATE IS NULL
        order by CC.SDATE DESC;
    </select>


<!--  마이페이지 메인에서 별점에 표시할 리뷰 평균 점수 가져오기  -->
    <select id="getTotalRating" parameterType="String" resultType="com.culturemoa.cultureMoaProject.user.dto.MyPageAverageRatingDTO" >
        select avg(RATING) as myPageTotalRating
        from USER_REVIEW_TBL as UR
        join USER_TBL as U on U.IDX = UR.RECEIVER_USER_IDX
        where U.ID = #{userId} AND U.EDATE IS NULL
    </select>


<!--  마이페이지 리뷰 탭 사용할 사용자 리뷰(텍스트) 정보 가져오기  -->
    <select id="getMyReviewListInfo" parameterType="String" resultType="com.culturemoa.cultureMoaProject.user.dto.ReviewListDTO" >
        select UR.REVIEW, UR.IDX, UR.SDATE
        from USER_REVIEW_TBL as UR
        join USER_TBL as U on U.IDX = UR.RECEIVER_USER_IDX
        where U.ID = #{userId} AND U.EDATE IS NULL
        order by UR.SDATE DESC;
    </select>

<!--  마이페이지 리뷰 탭 사용할 사용자 거래 평가 정보 가져오기  -->
    <select id="getMyEvaluationInfo" parameterType="String" resultType="map">
        SELECT
        EVAL_5001, EVAL_5002, EVAL_5003, EVAL_5004, EVAL_5005
        FROM USER_REVIEW_EVALUATION_TBL AS URE
        JOIN USER_TBL as U on U.IDX = URE.USER_IDX
        WHERE U.ID = #{userId} AND U.EDATE IS NULL;
    </select>


<!--  마이페이지 리뷰 탭에서 사용자 거래 평가 항목으로 사용할 카테고리 정보 가져오기  -->
    <select id="getEvaluationCategorySubInfo" parameterType="int" resultType="com.culturemoa.cultureMoaProject.user.dto.UserCategorySubDTO">
        select SUB_IDX as subIdx, NAME from CATEGORYSUB_TBL where SUB_IDX between 5000 and #{maxRange};
    </select>


<!--  선호도 체크에 사용할 category sub 테이블 조회  -->
    <select id="getCategorySubInfo" resultType="com.culturemoa.cultureMoaProject.user.dto.UserCategorySubDTO">
        select SUB_IDX as subIdx, NAME from CATEGORYSUB_TBL where SUB_IDX &lt; 4000;
    </select>

<!--  유저 선호도 체크 값 불러오기  -->
    <select id="getUserFavorites" parameterType="int" resultType="map">
        SELECT
        FAV_1001,
        FAV_1002,
        FAV_1003,
        FAV_1004,
        FAV_1005,
        FAV_1006,
        FAV_1007,
        FAV_2001,
        FAV_2002,
        FAV_2003,
        FAV_2004,
        FAV_2005,
        FAV_3001,
        FAV_3002,
        FAV_3003,
        FAV_3004,
        FAV_3005,
        FAV_3006,
        FAV_3007,
        FAV_3008
        FROM USER_FAVORITE_TBL
        WHERE USER_IDX = #{userIdx}
    </select>

    <!--  회원가입 및 마이페이지 수정에서 사용할 선호도 넣기 또는 업데이트  -->
    <insert id="insertOrUpdateFavorite" parameterType="com.culturemoa.cultureMoaProject.user.dto.UserRegisterFavoriteDTO" >
        INSERT INTO USER_FAVORITE_TBL (
        USER_IDX,
        FAV_1001, FAV_1002, FAV_1003, FAV_1004, FAV_1005, FAV_1006, FAV_1007,
        FAV_2001, FAV_2002, FAV_2003, FAV_2004, FAV_2005,
        FAV_3001, FAV_3002, FAV_3003, FAV_3004, FAV_3005, FAV_3006, FAV_3007, FAV_3008
        )
        VALUES (
        #{userIdx},
        <choose><when test="favorites.contains('FAV_1001')">1</when><otherwise>0</otherwise></choose>,
        <choose><when test="favorites.contains('FAV_1002')">1</when><otherwise>0</otherwise></choose>,
        <choose><when test="favorites.contains('FAV_1003')">1</when><otherwise>0</otherwise></choose>,
        <choose><when test="favorites.contains('FAV_1004')">1</when><otherwise>0</otherwise></choose>,
        <choose><when test="favorites.contains('FAV_1005')">1</when><otherwise>0</otherwise></choose>,
        <choose><when test="favorites.contains('FAV_1006')">1</when><otherwise>0</otherwise></choose>,
        <choose><when test="favorites.contains('FAV_1007')">1</when><otherwise>0</otherwise></choose>,
        <choose><when test="favorites.contains('FAV_2001')">1</when><otherwise>0</otherwise></choose>,
        <choose><when test="favorites.contains('FAV_2002')">1</when><otherwise>0</otherwise></choose>,
        <choose><when test="favorites.contains('FAV_2003')">1</when><otherwise>0</otherwise></choose>,
        <choose><when test="favorites.contains('FAV_2004')">1</when><otherwise>0</otherwise></choose>,
        <choose><when test="favorites.contains('FAV_2005')">1</when><otherwise>0</otherwise></choose>,
        <choose><when test="favorites.contains('FAV_3001')">1</when><otherwise>0</otherwise></choose>,
        <choose><when test="favorites.contains('FAV_3002')">1</when><otherwise>0</otherwise></choose>,
        <choose><when test="favorites.contains('FAV_3003')">1</when><otherwise>0</otherwise></choose>,
        <choose><when test="favorites.contains('FAV_3004')">1</when><otherwise>0</otherwise></choose>,
        <choose><when test="favorites.contains('FAV_3005')">1</when><otherwise>0</otherwise></choose>,
        <choose><when test="favorites.contains('FAV_3006')">1</when><otherwise>0</otherwise></choose>,
        <choose><when test="favorites.contains('FAV_3007')">1</when><otherwise>0</otherwise></choose>,
        <choose><when test="favorites.contains('FAV_3008')">1</when><otherwise>0</otherwise></choose>
        )
        ON DUPLICATE KEY UPDATE
        FAV_1001 = VALUES(FAV_1001),
        FAV_1002 = VALUES(FAV_1002),
        FAV_1003 = VALUES(FAV_1003),
        FAV_1004 = VALUES(FAV_1004),
        FAV_1005 = VALUES(FAV_1005),
        FAV_1006 = VALUES(FAV_1006),
        FAV_1007 = VALUES(FAV_1007),
        FAV_2001 = VALUES(FAV_2001),
        FAV_2002 = VALUES(FAV_2002),
        FAV_2003 = VALUES(FAV_2003),
        FAV_2004 = VALUES(FAV_2004),
        FAV_2005 = VALUES(FAV_2005),
        FAV_3001 = VALUES(FAV_3001),
        FAV_3002 = VALUES(FAV_3002),
        FAV_3003 = VALUES(FAV_3003),
        FAV_3004 = VALUES(FAV_3004),
        FAV_3005 = VALUES(FAV_3005),
        FAV_3006 = VALUES(FAV_3006),
        FAV_3007 = VALUES(FAV_3007),
        FAV_3008 = VALUES(FAV_3008)
    </insert>


<!--  판매자 정보를 가져오기  -->
    <select id="getSellerInfo" parameterType="String" resultType="com.culturemoa.cultureMoaProject.user.dto.SellerInfoDTO" >
        SELECT
        S.NAME AS sellerName, S.IDX AS sellerIdx
        FROM USER_TRANSACTION_TBL T
        JOIN PRODUCT_TBL P ON T.PRODUCT_IDX = P.IDX
        JOIN USER_TBL B ON T.USER_IDX = B.IDX
        JOIN USER_TBL S ON P.USER_IDX = S.IDX
        WHERE B.ID = #{userId};
    </select>


</mapper>